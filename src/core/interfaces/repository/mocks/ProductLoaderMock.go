// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/repository/ProductLoader.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "padaria/src/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductLoader is a mock of ProductLoader interface.
type MockProductLoader struct {
	ctrl     *gomock.Controller
	recorder *MockProductLoaderMockRecorder
}

// MockProductLoaderMockRecorder is the mock recorder for MockProductLoader.
type MockProductLoaderMockRecorder struct {
	mock *MockProductLoader
}

// NewMockProductLoader creates a new mock instance.
func NewMockProductLoader(ctrl *gomock.Controller) *MockProductLoader {
	mock := &MockProductLoader{ctrl: ctrl}
	mock.recorder = &MockProductLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductLoader) EXPECT() *MockProductLoaderMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockProductLoader) DeleteProduct(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductLoaderMockRecorder) DeleteProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductLoader)(nil).DeleteProduct), productID)
}

// InsertProduct mocks base method.
func (m *MockProductLoader) InsertProduct(product domain.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockProductLoaderMockRecorder) InsertProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockProductLoader)(nil).InsertProduct), product)
}

// SelectProducts mocks base method.
func (m *MockProductLoader) SelectProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProducts indicates an expected call of SelectProducts.
func (mr *MockProductLoaderMockRecorder) SelectProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProducts", reflect.TypeOf((*MockProductLoader)(nil).SelectProducts))
}

// UpdateProduct mocks base method.
func (m *MockProductLoader) UpdateProduct(product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductLoaderMockRecorder) UpdateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductLoader)(nil).UpdateProduct), product)
}
