// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/core/interfaces/primary/ProductManager.go

// Package mock_primary is a generated GoMock package.
package mock_primary

import (
	domain "padaria/src/core/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductManager is a mock of ProductManager interface.
type MockProductManager struct {
	ctrl     *gomock.Controller
	recorder *MockProductManagerMockRecorder
}

// MockProductManagerMockRecorder is the mock recorder for MockProductManager.
type MockProductManagerMockRecorder struct {
	mock *MockProductManager
}

// NewMockProductManager creates a new mock instance.
func NewMockProductManager(ctrl *gomock.Controller) *MockProductManager {
	mock := &MockProductManager{ctrl: ctrl}
	mock.recorder = &MockProductManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductManager) EXPECT() *MockProductManagerMockRecorder {
	return m.recorder
}

// EditProduct mocks base method.
func (m *MockProductManager) EditProduct(product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProduct indicates an expected call of EditProduct.
func (mr *MockProductManagerMockRecorder) EditProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProduct", reflect.TypeOf((*MockProductManager)(nil).EditProduct), product)
}

// ListProducts mocks base method.
func (m *MockProductManager) ListProducts() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductManagerMockRecorder) ListProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductManager)(nil).ListProducts))
}

// RegisterProduct mocks base method.
func (m *MockProductManager) RegisterProduct(product domain.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProduct", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProduct indicates an expected call of RegisterProduct.
func (mr *MockProductManagerMockRecorder) RegisterProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProduct", reflect.TypeOf((*MockProductManager)(nil).RegisterProduct), product)
}

// RemoveProduct mocks base method.
func (m *MockProductManager) RemoveProduct(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockProductManagerMockRecorder) RemoveProduct(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockProductManager)(nil).RemoveProduct), productID)
}
